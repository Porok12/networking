name: build and run tests

on:
  push:
    branches: [ server ]
  pull_request:
    branches: [ server ]
    
jobs:
  build-ubuntu:
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set env
      run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
    - name: Test
      run: echo $RELEASE_VERSION
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: checking
      run: |
        sudo apt install nodejs
        node --version
        npm --version
        pwd
    - name: HEAD
      run: head -10 CMakeLists.txt
    - name: Tagging
      id: version
      uses: butlerlogic/action-autotag@stable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
#         GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        strategy: regex
        root: "CMakeLists.txt"
        regex_pattern: "(?:VERSION )([0-9\\.]{5})([-\\+][\\w\\.0-9]+)?" #"(?:VERSION )(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?"
        tag_prefix: "server-v"
        tag_suffix: "-alpha"
        tag_message: "Tag message"
    - name: print
      env:
          OUTPUT_CONTEXT: ${{ toJson(steps) }}
      run: |
        echo "$OUTPUT_CONTEXT"
        echo "${{ toJson(steps.version.outputs) }}"
    # install dependencies
    - name: update
      run: sudo apt-get update
    - name: boost
      run: sudo apt-get install -y libboost-program-options-dev libboost-serialization-dev libboost-system-dev libboost-test-dev
    - name: postgresql
      run: sudo apt-get install --yes --quiet libpq-dev postgresql-server-dev-all # postgresql  
    # build project
    - name: mkdir
      run: mkdir build
    - name: cmake build
      run: cmake -Bbuild -H.
    - name: cmake make
      run: cmake --build build/ --target all
      env:
        MAKEFLAGS: "-j2"
    # run tests
    - name: run tests
      run: build/test/Test
    - name: Create My Release
      if: ${{ steps.version.outputs.tagcreated == 'yes' }}
      id: create_my_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ steps.version.outputs.tagname }}"
        release_name: "Server release v${{ steps.version.outputs.version }}-alpha"
        body: "Automated Release by GitHub Action CI - ${{ steps.version.outputs.tagmessage }}"
        draft: false
        prerelease: false
    - name: create zip
      run: zip --junk-paths ./server-linux-v0.0.0-alpha.zip ./build/test/Test
    - name: Upload Release Asset (x64)
      if: ${{ steps.version.outputs.tagcreated == 'yes' }}
      id: upload-release-asset-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_my_release.outputs.upload_url }}
        asset_path: ./server-linux-v0.0.0-alpha.zip
        asset_name: Linux.zip
        asset_content_type: application/zip
  
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install PostgreSQL
        run: |
          Start-Process powershell -Verb runAs
          choco install -y postgresql12
      - name: Download Boost
        shell: powershell
        run: |
          $uri = 'https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.zip'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest -Uri $uri -OutFile C:\boost.zip -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome
#          Invoke-WebRequest https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.zip -OutFile C:\boost.zip
#      - uses: actions/checkout@v2
      - name: Unzip boost
        run: Expand-Archive -LiteralPath 'C:\boost.zip' -DestinationPath C:\install\
      - name: Run bootstrap
        shell: powershell
        run: |
          pwd
          cd C:\install\boost_1_68_0\tools\build\
          .\bootstrap.bat gcc
      - name: Install Boost
        continue-on-error: true
        shell: powershell
        run: |
          cd C:\install\boost_1_68_0\tools\build\
          .\b2 --with-system --with-program_options --with-serialization --with-test --build-type=complete -j2 --prefix="C:\boost-build" toolset=gcc install
          $env:Path += ";C:\boost-build\bin"
          cd C:\install\boost_1_68_0
          C:\boost-build\bin\b2.exe --with-system --with-program_options --with-serialization --with-test --build-type=complete -j2 --build-dir="C:\install\boost_1_68_0\build" --build-type=complete --prefix="C:\boost" toolset=gcc install
      - name: Check libs
        if: success() || failure()
        run: |
          cd c:\boost\lib
          Get-ChildItem
      - name: Running cmake (windows)
        if: success() || failure()
        run: |
          $env:BOOST_INCLUDEDIR = 'C:\boost\include'
          $env:BOOST_LIBRARYDIR = 'C:\boost\lib'
          $env:BOOST_ROOT = 'C:\boost'
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBOOST_ROOT=c:/boost -DBoost_DEBUG=ON -G "MinGW Makefiles" ..
      - name: Running make (windows)
        if: success() || failure()
        run: |
          cd build
          make
      - name: Run tests
        run: .\build\test\Test.exe
      - name: create archive
        if: success() || failure()
        run: Compress-Archive -Path .\build\* -DestinationPath .\server-windows-v0.0.0-alpha.zip
      - name: Create Release
        if: success() || failure()
        id: my_create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "$0.0.0-test"
          release_name: "Server release 0.0.0-test"
          body: "Automated Release by GitHub Action CI"
          draft: false
          prerelease: false
      - name: Upload Release Asset
        if: success() || failure()
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.my_create_release.outputs.upload_url }}
          asset_path: ./server-windows-v0.0.0-alpha.zip
          asset_name: Windows.zip
          asset_content_type: application/zip

    
