name: build and run tests

on:
  push:
    branches: [ server ]
  pull_request:
    branches: [ server ]
    
jobs:
  build-ubuntu:
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set env
      run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
    - name: Test
      run: echo $RELEASE_VERSION
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: checking
      run: |
        sudo apt install nodejs
        node --version
        npm --version
        pwd
    - name: HEAD
      run: head -10 CMakeLists.txt
    - name: Tagging
      id: version
      uses: butlerlogic/action-autotag@stable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
#         GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        strategy: regex
        root: "CMakeLists.txt"
        regex_pattern: "(?:VERSION )([0-9\\.]{5})([-\\+][\\w\\.0-9]+)?" #"(?:VERSION )(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?"
        tag_prefix: "server-v"
        tag_suffix: "-alpha"
        tag_message: "Tag message"
    - name: print
      env:
          OUTPUT_CONTEXT: ${{ toJson(steps) }}
      run: |
        echo "$OUTPUT_CONTEXT"
        echo "${{ toJson(steps.version.outputs) }}"
    # install dependencies
    - name: update
      run: sudo apt-get update
    - name: boost
      run: sudo apt-get install -y libboost-program-options-dev libboost-serialization-dev libboost-system-dev libboost-test-dev
#     - name: Cache boost
#       uses: actions/cache@v2
#       id: cache-boost
#       with:
#         path: "~/boost"
#         key: libboost-all-dev
#     - name: load cache
#       if: steps.cache-boost.outputs.cache-hit == 'true'
#       run: |
#         sudo cp --force --recursive ~/boost/* /
#     - name: install cache
#       if: steps.cache-boost.outputs.cache-hit != 'true'
#       run: |
#         sudo apt-get update && sudo apt-get install --yes libboost-all-dev
#         mkdir -p ~/boost
#         for dep in libboost-all-dev; do
#           dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/boost/
#         done
    - name: postgresql
      run: sudo apt-get install --yes --quiet libpq-dev postgresql-server-dev-all # postgresql  
    # build project
    - name: mkdir
      run: mkdir build
    - name: cmake build
      run: cmake -Bbuild -H.
    - name: cmake make
      run: cmake --build build/ --target all
      env:
        MAKEFLAGS: "-j2"
    # run tests
    - name: run tests
      run: build/test/Test
    # Temporary release
    - name: Create My Release
      if: ${{ steps.version.outputs.tagcreated == 'yes' }}
      id: create_my_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ steps.version.outputs.tagname }}"
        release_name: "Server release v${{ steps.version.outputs.version }}-alpha"
        body: "Automated Release by GitHub Action CI - ${{ steps.version.outputs.tagmessage }}"
        draft: false
        prerelease: false
    - name: pwd
      run: pwd
    - name: touch txt
      run: touch file.txt
    - name: create zip
      run: zip --junk-paths ./SampleX64.zip file.txt ./build/test/Test
    - name: Upload Release Asset (x64)
      if: ${{ steps.version.outputs.tagcreated == 'yes' }}
      id: upload-release-asset-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_my_release.outputs.upload_url }}
        asset_path: ./SampleX64.zip
        asset_name: SampleX64.zip
        asset_content_type: application/zip
  
  build-windows:
    runs-on: windows-latest
    steps:
#       - name: g++
#         run: |
#           pwd
#           g++ -v
#       #    Get-ChildItem C:\
#       # b2 --build-dir="C:\Program Files\boost_1_59_0\build" --prefix="C:\Program Files\boost" toolset=gcc install
#       # b2 install --prefix="C:\Program Files\boost-build"
#       # bootstrap.bat mingw
#       # bootstrap gcc ; b2 toolset=gcc regex ; b2 --show-libraries 
#       # set PATH=%PATH%;C:\your\path\here\
#       - name: Install 7Zip PowerShell Module
#         shell: powershell
#         run: Install-Module 7Zip4PowerShell -Force -Verbose
#       - name: Choco
#         shell: powershell
#         run: |
#           Start-Process powershell -Verb runAs
#           Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
# #       - name: Install Boost1
# #         shell: powershell
# #         run: wget "https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.zip" -outfile "boost.zip"
#       - name: Choco install Boost
#         shell: powershell
#         run: choco install -y boost-msvc-12
        
#       - name: Install Boost2
#         shell: powershell
#         run: |
#           $uri = 'https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.zip'
#           [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
#           Invoke-WebRequest -Uri $uri -OutFile C:\boost.zip -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome
# #          Invoke-WebRequest https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.zip -OutFile C:\boost.zip
# #      - uses: actions/checkout@v2
#       - name: Tada
#         run: Expand-Archive -LiteralPath 'C:\boost.zip' -DestinationPath C:\install\
# #       - name: Hu
# #         shell: powershell
# #         run: |
# #           cd C:\boost\boost_1_74_0\tools\build\
# #           pwd
# #       - name: Hua0
# #         shell: cmd
# #         run: |
# #           CMD /c bootstrap
#       - name: Hua
#         shell: powershell
#         run: |
#           pwd
#           cd C:\install\boost_1_68_0\tools\build
#           .\bootstrap.bat gcc
#       - name: Hua2
#         shell: powershell
#         run: |
#           pwd
#           cd C:\install\boost_1_68_0\tools\build
#           .\b2 install --prefix="C:\boost-build" toolset=gcc
#           $env:Path += ";C:\boost-build\bin"
#           cd C:\boost-build\bin
#           Get-ChildItem
#           cd C:\install\boost_1_68_0
#           & C:\boost-build\bin\b2.exe --build-dir="C:\install\boost_1_68_0\build" --with-system --with-program_options --with-serialization --with-test --build-type=complete --prefix="C:\boost" toolset=gcc install
#           pwd
          
#           $env:BOOST_INCLUDEDIR = 'C:\boost\include'
#           $env:BOOST_LIBRARYDIR = 'C:\boost\lib'
#           $env:BOOST_ROOT = 'C:\boost'
#           Set-Location Env:
#           Get-ChildItem
      - name: Running cmake (windows)
        run: |
          cd ${{ github.workspace }}
          mkdir build
          cd build
          cmake ..
          make
      - name: create archive
        run: Compress-Archive -Path .\build\test\*.* -DestinationPath .\server-windows-v0.0.0-alpha.zip

    
