name: build and run tests

on:
  push:
    branches: [ server ]
  pull_request:
    branches: [ server ]
    
jobs:
  build-ubuntu:
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Set env
      run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
    - name: Test
      run: |
        echo $RELEASE_VERSION
        echo ${{ env.RELEASE_VERSION }}
    # install dependencies
    - name: update
      run: sudo apt-get update
    - name: boost
      run: sudo apt-get install -y libboost-program-options-dev libboost-serialization-dev libboost-system-dev libboost-test-dev
#     - name: Cache boost
#       uses: actions/cache@v2
#       id: cache-boost
#       with:
#         path: "~/boost"
#         key: libboost-all-dev
#     - name: load cache
#       if: steps.cache-boost.outputs.cache-hit == 'true'
#       run: |
#         sudo cp --force --recursive ~/boost/* /
#     - name: install cache
#       if: steps.cache-boost.outputs.cache-hit != 'true'
#       run: |
#         sudo apt-get update && sudo apt-get install --yes libboost-all-dev
#         mkdir -p ~/boost
#         for dep in libboost-all-dev; do
#           dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/boost/
#         done
    - name: postgresql
      run: sudo apt-get install --yes --quiet libpq-dev postgresql-server-dev-all # postgresql  
    # build project
    - name: mkdir
      run: mkdir build
    - name: cmake build
      run: cmake -Bbuild -H.
    - name: cmake make
      run: cmake --build build/ --target all
      env:
        MAKEFLAGS: "-j2"
    # run tests
    - name: run tests
      run: build/test/Test
    # Temporary release
    - name: Create My Release
      id: create_my_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Automated Release by GitHub Action CI
        draft: false
        prerelease: false
    - name: pwd
      run: pwd
    - name: touch txt
      run: touch file.txt
    - name: create zip
      run: zip ./SampleX64.zip file.txt ./buildtest/Test
    - name: Upload Release Asset (x64)
      id: upload-release-asset-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_my_release.outputs.upload_url }}
        asset_path: ./SampleX64.zip
        asset_name: SampleX64.zip
        asset_content_type: application/zip
  
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Install 7Zip PowerShell Module
        shell: powershell
        run: Install-Module 7Zip4PowerShell -Force -Verbose
#       - name: Install Boost0
#         shell: powershell
#         run: wget "https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.zip" -outfile "boost.zip"
#       - name: Install Boost1
#         shell: powershell
#         run: wget "https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.zip" -outfile "boost.zip"
      - name: Install Boost2
        shell: powershell
        run: Invoke-WebRequest https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.zip -OutFile C:\boost.zip
      - uses: actions/checkout@v2
      - name: Tada
        run: Expand-Archive -LiteralPath 'C:\boost.zip' -DestinationPath C:\boost\
      - name: Hua
        shell: powershell
        run: |
          cd C:\boost
          cmd.exe /c "C:\boost\bootstrap.bat"
      - name: Hua2
        shell: powershell
        run: .\b2

#       - name: Installing server (windows)
#         run: |
#           cd ..
#           git clone https://github.com/Microsoft/vcpkg.git
#           cd vcpkg
#           git checkout --force 2020.01
#           .\bootstrap-vcpkg.bat
#           .\vcpkg.exe install cppzmq:x64-windows

      - name: Running cmake (windows)
        run: |
          cd ${{ github.workspace }}
          mkdir build
          cd build
          cmake ..
          make

    
